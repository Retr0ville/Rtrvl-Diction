[{"C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\index.tsx":"1","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\App.tsx":"2","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\components\\Header.tsx":"3","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\components\\Infobody.tsx":"4","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\api\\index.tsx":"5","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\api\\suggestApi.tsx":"6","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\api\\dictionaryApi.tsx":"7","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\api\\randomWordApi.tsx":"8"},{"size":168,"mtime":1651155618410,"results":"9","hashOfConfig":"10"},{"size":1756,"mtime":1651291127996,"results":"11","hashOfConfig":"10"},{"size":4753,"mtime":1651338235248,"results":"12","hashOfConfig":"10"},{"size":6485,"mtime":1651294464206,"results":"13","hashOfConfig":"10"},{"size":160,"mtime":1651272402006,"results":"14","hashOfConfig":"10"},{"size":495,"mtime":1651270740043,"results":"15","hashOfConfig":"10"},{"size":354,"mtime":1651275437567,"results":"16","hashOfConfig":"10"},{"size":401,"mtime":1651275520529,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"8o3u44",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\index.tsx",[],["37","38","39","40","41"],"C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\App.tsx",["42","43"],"/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\nimport React, { useEffect } from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport Header from './components/Header';\nimport './App.css';\nimport InfoBody from './components/Infobody';\nimport { define, randomWord } from './api';\nimport { RandomWord } from './api/randomWordApi';\n\nconst App = () => {\n    const [randWord, setRandWord] = React.useState<Partial<RandomWord>>({});\n    const [def, setDef] = React.useState<any>({});\n\n    const getRandomWord = async () => {\n        const results = await randomWord();\n        if(results.word) {\n        setRandWord(results);\n        }\n    };\n    const getDef = async (word: string) => {\n        const results = await define(word);\n        if(!results.error) {\n        setDef(results);\n        }\n        else {\n        setDef({error: \"Definition not found, try another word\"});\n        }\n    };\n    useEffect(() => {\n        setDef({});\n        getRandomWord();\n    }, []);\n    useEffect(() => {\n        console.log(randWord);\n    }, [randWord]);\n    useEffect(() => {\n        console.log(def);\n    }, [def]);\n    const handleSubmit = async (word: string) => {\n        setRandWord({})\n        getDef(word);\n    };\n    \n\n    return (\n        <div className=\"font-monaco\">\n            <div className=\"bg-color-alt w-100 py-3 d-flex align-items-center justify-content-center\">\n                <Header\n                    handleSubmit={handleSubmit}\n                />\n            </div>\n            <InfoBody \n                randWord={randWord}\n                def={def}\n                handleSubmit={handleSubmit}\n            />\n        </div>\n    );\n};\n\nexport default App;\n","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\components\\Header.tsx",[],"C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\components\\Infobody.tsx",["44","45"],"/* eslint-disable jsx-a11y/click-events-have-key-events */\r\n/* eslint-disable jsx-a11y/no-static-element-interactions */\r\n/* eslint-disable @typescript-eslint/explicit-module-boundary-types */\r\nimport React from 'react';\r\nimport { FcSpeaker } from 'react-icons/fc';\r\nimport styled from 'styled-components';\r\n\r\nconst InfoWrapper = styled.div`\r\n  height: 100%;\r\n  margin-top: -1rem;\r\n  .inv {\r\n    width: calc(100% - var(--d) - 1rem);\r\n  }\r\n  --d: 91.16px;\r\n  --ad: calc(var(--d) + var(--inf));\r\n  --td: calc(var(--d) / 4);\r\n  --inf: 999px ;\r\n  .corner {\r\n    width: var(--ad);\r\n    height: 101%;\r\n    background: linear-gradient(to bottom, #06d6a0 16px, #fff 16px 100%);\r\n  }\r\n  .left {\r\n    top: 0px;\r\n    left: calc((var(--d)/-1.5) - var(--inf));\r\n    border-radius: 0 var(--td) 0 0;\r\n  }\r\n  .right {\r\n    top: 0px;\r\n    right: calc((var(--d)/-1.5) - var(--inf));\r\n    border-radius: var(--td) 0 0 0;\r\n  }\r\n  @media only screen and (max-width: 480px) {\r\n    .corner {\r\n      display: none;\r\n    }\r\n    .inv {\r\n      min-width: 320px;\r\n    }\r\n    margin-top: 1rem;\r\n    .info {\r\n    border-radius: 1rem;\r\n    padding: 1rem !important;\r\n    }    }\r\n`;\r\n\r\n\r\nconst InfoBody = ({ randWord, def, handleSubmit }) => {\r\n  return (\r\n    <InfoWrapper className=\"body w-100 d-flex justify-content-center overflow-hidden hover-shadow-bot \">\r\n      <div className=\"d-flex inv mw-1100 \">\r\n        <div className=\"info d-flex justify-content-center position-relative w-100 mx-0 p-5 shadow-sm mx-lg-5 bg-color-secondary\">\r\n          <div className=\"left corner position-absolute\" />\r\n          <div className=\"right corner position-absolute\" />\r\n\r\n          {randWord.word && (\r\n            <div className=\"mt-3 d-flex flex-column justify-content-center\">\r\n              <h3 className=\"fw-bolder mb-2\">\r\n                {`${randWord.word}:`}\r\n              </h3>\r\n              <span> (pronounced {' '}<small>{randWord.pronunciation})</small></span>\r\n              <p className=\"mt-3\">\r\n                {randWord.definition}\r\n              </p>\r\n            </div>\r\n          )}\r\n          {(def.word || def.error) && (\r\n            <div className=\"mt-3 px-2 px-lg-5 d-flex flex-column justify-content-center \">\r\n              {def.error ?\r\n                (\r\n                  <h3 className=\"fw-bolder mb-2\">\r\n                    {def.error}\r\n                  </h3>\r\n                ) : (\r\n                  <>\r\n                    <div className=\"d-flex\">\r\n                      <h1 className=\"fw-bolder mb-2 me-2\">\r\n                        {def.word}\r\n                      </h1>\r\n                      <span>\r\n                        <small>\r\n                          {def.phonetic}\r\n                        </small>\r\n                      </span>\r\n                      <FcSpeaker />\r\n                    </div>\r\n                    <div className=\"meanings\">\r\n                      {\r\n                        def.meanings.map((meaning: any) => {\r\n                          return (\r\n                            <div key={meaning.partOfSpeech}>\r\n                              <h4 className=\"mt-4 mb-2 py-1 px-2 fit-content rounded-infinite bg-color-primary\">\r\n                                {meaning.partOfSpeech}\r\n                              </h4>\r\n                              <ol>\r\n                                {\r\n                                  meaning.definitions.map((defn: any) => {\r\n                                    return (\r\n                                      <li className=\"bg-def fit-content \r\n                                      hover-shadow-bot pointer pt-1  rounded-3 px-2\" key={defn.definition}>\r\n                                        <p>\r\n                                          {defn.definition}\r\n                                        </p>\r\n                                        {defn.example && (\r\n                                          <div className=\"ms-3 mb-3\">\r\n                                          <h6 className=\"fw-bolder mb-0\">Example:</h6>\r\n                                          <small className=\"fw-bold\">\r\n                                            {defn.example}\r\n                                          </small>\r\n                                          </div>\r\n                                        )}\r\n                                      </li>\r\n                                    )\r\n                                  })\r\n                                }\r\n                              </ol>\r\n                              {(meaning.synonyms.length > 0) && (\r\n                                <>\r\n                                  <h5>Synonymns</h5>\r\n                                  <div className=\"d-flex flex-wrap\">\r\n                                    {meaning.synonyms.map((syn: string) => {\r\n                                      return (\r\n                                        <div key={syn} className=\"rounded-infinite bg-color-alt hover-shadow2 pointer px-2 py-1 mx-1 mb-2\" onClick={(e)=>handleSubmit(e.currentTarget.innerText)}>\r\n                                          {syn}\r\n                                        </div>\r\n                                      )\r\n                                    })}\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                              {(meaning.antonyms.length > 0) && (\r\n                                <>\r\n                                  <h5>Antonymns</h5>\r\n                                  <div className=\"d-flex flex-wrap\">\r\n                                    {meaning.antonyms.map((ant: string) => {\r\n                                      return (\r\n                                        <div key={ant} className=\"rounded-infinite pointer text-light hover-shadow2 bg-color-alt2 px-2 py-1 mx-1 mb-2\" onClick={(e)=>handleSubmit(e.currentTarget.innerText)}>\r\n                                          {ant}\r\n                                        </div>\r\n                                      )\r\n                                    })}\r\n                                  </div>\r\n                                </>\r\n                              )}\r\n                            </div>\r\n                          )\r\n                        })\r\n                      }\r\n                    </div>\r\n\r\n                  </>\r\n                )\r\n              }\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    </InfoWrapper>\r\n  );\r\n}\r\n\r\n\r\nexport default InfoBody;","C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\api\\index.tsx",[],"C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\api\\suggestApi.tsx",[],"C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\api\\dictionaryApi.tsx",[],"C:\\Users\\My\\aReactApps\\Diction-io\\diction-io\\src\\api\\randomWordApi.tsx",[],{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","replacedBy":"49"},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":35,"column":9,"nodeType":"58","messageId":"59","endLine":35,"endColumn":20},{"ruleId":"56","severity":1,"message":"57","line":38,"column":9,"nodeType":"58","messageId":"59","endLine":38,"endColumn":20},{"ruleId":"60","severity":1,"message":"61","line":89,"column":52,"nodeType":"62","messageId":"63","endLine":89,"endColumn":55,"suggestions":"64"},{"ruleId":"60","severity":1,"message":"61","line":97,"column":66,"nodeType":"62","messageId":"63","endLine":97,"endColumn":69,"suggestions":"65"},"lines-around-directive",["66"],"global-require",[],"no-buffer-constructor",[],"no-new-require",[],"no-path-concat",[],"no-console","Unexpected console statement.","MemberExpression","unexpected","@typescript-eslint/no-explicit-any","Unexpected any. Specify a different type.","TSAnyKeyword","unexpectedAny",["67","68"],["69","70"],"padding-line-between-statements",{"messageId":"71","fix":"72","desc":"73"},{"messageId":"74","fix":"75","desc":"76"},{"messageId":"71","fix":"77","desc":"73"},{"messageId":"74","fix":"78","desc":"76"},"suggestUnknown",{"range":"79","text":"80"},"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct.","suggestNever",{"range":"79","text":"81"},"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of.",{"range":"82","text":"80"},{"range":"82","text":"81"},[2929,2932],"unknown","never",[3381,3384]]